---
// SearchBar component for movie search functionality
---

<div class="relative">
  <form action="/search" method="get" class="relative">
    <input
      type="text"
      name="q"
      placeholder="Search movies..."
      class="w-full bg-dark-700 border border-dark-600 rounded-lg px-4 py-2 pl-10 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
      autocomplete="off"
    />
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <button
      type="submit"
      class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white transition-colors"
    >
      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5-5 5M6 12h12"></path>
      </svg>
    </button>
  </form>

  <!-- Search suggestions dropdown (will be populated via JavaScript) -->
  <div id="search-suggestions" class="absolute top-full left-0 right-0 bg-dark-800 border border-dark-600 rounded-lg mt-1 shadow-xl z-50 hidden max-h-96 overflow-y-auto">
    <!-- Suggestions will be populated here -->
  </div>
</div>

<script>
  // Search functionality with debouncing
  let searchTimeout;
  const searchInput = document.querySelector('input[name="q"]') as HTMLInputElement;
  const suggestionsContainer = document.getElementById('search-suggestions');

  if (searchInput && suggestionsContainer) {
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      
      // Clear previous timeout
      clearTimeout(searchTimeout);
      
      if (query.length < 2) {
        suggestionsContainer.classList.add('hidden');
        return;
      }

      // Debounce search requests
      searchTimeout = setTimeout(async () => {
        try {
          const response = await fetch(`/api/search-suggestions?q=${encodeURIComponent(query)}`);
          const data = await response.json();
          
          if (data.results && data.results.length > 0) {
            displaySuggestions(data.results.slice(0, 5)); // Show top 5 results
          } else {
            suggestionsContainer.classList.add('hidden');
          }
        } catch (error) {
          console.error('Search error:', error);
          suggestionsContainer.classList.add('hidden');
        }
      }, 300);
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      if (!searchInput.contains(target) && !suggestionsContainer.contains(target)) {
        suggestionsContainer.classList.add('hidden');
      }
    });
  }

  function displaySuggestions(movies) {
    if (!suggestionsContainer) return;

    const suggestionsHTML = movies.map(movie => {
      const posterUrl = movie.poster_path ? `https://image.tmdb.org/t/p/w92${movie.poster_path}` : '/placeholder-movie.jpg';
      const year = movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown';
      const rating = movie.vote_average ? movie.vote_average.toFixed(1) : 'N/A';
      
      return `<a href="/movie/${movie.id}" class="flex items-center p-3 hover:bg-dark-700 transition-colors border-b border-dark-700 last:border-b-0">
        <img 
          src="${posterUrl}" 
          alt="${movie.title}"
          class="w-12 h-18 object-cover rounded mr-3"
          loading="lazy"
        />
        <div class="flex-1">
          <h4 class="text-white font-medium text-sm">${movie.title}</h4>
          <p class="text-gray-400 text-xs">${year}</p>
          <div class="flex items-center mt-1">
            <svg class="w-3 h-3 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
            </svg>
            <span class="text-gray-400 text-xs">${rating}</span>
          </div>
        </div>
      </a>`;
    }).join('');

    suggestionsContainer.innerHTML = suggestionsHTML;
    suggestionsContainer.classList.remove('hidden');
  }
</script>

---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MovieCard from '../../components/MovieCard.astro';
import { getMovieDetails, getImageUrl, getBackdropUrl, formatDate, formatRuntime } from '../../utils/tmdb.js';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}

const movie = await getMovieDetails(id);

if (!movie) {
  return Astro.redirect('/404');
}

const backdropUrl = getBackdropUrl(movie.backdrop_path);
const posterUrl = getImageUrl(movie.poster_path, 'w500');
const rating = movie.vote_average ? movie.vote_average.toFixed(1) : 'N/A';
const releaseDate = formatDate(movie.release_date);
const runtime = formatRuntime(movie.runtime);

// Get director and main cast
const director = movie.credits?.crew?.find(person => person.job === 'Director');
const mainCast = movie.credits?.cast?.slice(0, 6) || [];

// Get trailer
const trailer = movie.videos?.results?.find(video => 
  video.type === 'Trailer' && video.site === 'YouTube'
);
---

<Layout title={`${movie.title} - MovieHub`} description={movie.overview}>
  <Header />
  
  <main>
    <!-- Hero Section -->
    <section class="relative min-h-screen flex items-center">
      <!-- Background -->
      <div class="absolute inset-0">
        <img 
          src={backdropUrl}
          alt={movie.title}
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-r from-black/90 via-black/60 to-black/30"></div>
        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent"></div>
      </div>

      <!-- Content -->
      <div class="relative z-10 container mx-auto px-4 py-20">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-12 items-start">
          <!-- Poster -->
          <div class="lg:col-span-1">
            <div class="sticky top-24">
              <img 
                src={posterUrl}
                alt={movie.title}
                class="w-full max-w-md mx-auto rounded-lg shadow-2xl"
              />
              
              <!-- Action Buttons -->
              <div class="mt-6 space-y-3">
                {trailer && (
                  <button 
                    onclick={`openTrailer('${trailer.key}')`}
                    class="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2"
                  >
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
                    </svg>
                    <span>Watch Trailer</span>
                  </button>
                )}
                
                <button class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  <span>Add to Watchlist</span>
                </button>
                
                <button class="w-full bg-gray-600 hover:bg-gray-700 text-white py-3 px-6 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                  </svg>
                  <span>Share</span>
                </button>
              </div>
            </div>
          </div>

          <!-- Movie Info -->
          <div class="lg:col-span-2">
            <h1 class="text-4xl md:text-6xl font-bold text-white mb-4">
              {movie.title}
            </h1>
            
            {movie.tagline && (
              <p class="text-xl text-blue-300 italic mb-6">"{movie.tagline}"</p>
            )}

            <!-- Rating and Info -->
            <div class="flex flex-wrap items-center gap-6 mb-8">
              <div class="flex items-center space-x-2">
                <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                </svg>
                <span class="text-white text-xl font-semibold">{rating}</span>
                <span class="text-gray-400">({movie.vote_count} votes)</span>
              </div>
              
              <span class="text-gray-300">{releaseDate}</span>
              <span class="text-gray-300">{runtime}</span>
              
              {movie.status && (
                <span class="bg-green-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                  {movie.status}
                </span>
              )}
            </div>

            <!-- Genres -->
            {movie.genres && movie.genres.length > 0 && (
              <div class="mb-8">
                <div class="flex flex-wrap gap-2">
                  {movie.genres.map((genre) => (
                    <span class="bg-blue-600/20 text-blue-300 px-3 py-1 rounded-full text-sm border border-blue-600/30">
                      {genre.name}
                    </span>
                  ))}
                </div>
              </div>
            )}

            <!-- Overview -->
            <div class="mb-8">
              <h2 class="text-2xl font-bold text-white mb-4">Overview</h2>
              <p class="text-gray-300 text-lg leading-relaxed">
                {movie.overview}
              </p>
            </div>

            <!-- Director and Cast -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              {director && (
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Director</h3>
                  <p class="text-gray-300">{director.name}</p>
                </div>
              )}
              
              {movie.budget && movie.budget > 0 && (
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Budget</h3>
                  <p class="text-gray-300">${movie.budget.toLocaleString()}</p>
                </div>
              )}
              
              {movie.revenue && movie.revenue > 0 && (
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Revenue</h3>
                  <p class="text-gray-300">${movie.revenue.toLocaleString()}</p>
                </div>
              )}
              
              {movie.production_companies && movie.production_companies.length > 0 && (
                <div>
                  <h3 class="text-xl font-bold text-white mb-2">Production</h3>
                  <p class="text-gray-300">
                    {movie.production_companies.map(company => company.name).join(', ')}
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Cast Section -->
    {mainCast.length > 0 && (
      <section class="py-16 bg-dark-800">
        <div class="container mx-auto px-4">
          <h2 class="text-3xl font-bold text-white mb-8">Cast</h2>
          
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6">
            {mainCast.map((actor) => (
              <div class="text-center">
                <div class="aspect-[2/3] mb-3 overflow-hidden rounded-lg bg-dark-700">
                  {actor.profile_path ? (
                    <img 
                      src={getImageUrl(actor.profile_path, 'w185')}
                      alt={actor.name}
                      class="w-full h-full object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <div class="w-full h-full flex items-center justify-center">
                      <svg class="w-12 h-12 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                      </svg>
                    </div>
                  )}
                </div>
                <h4 class="text-white font-medium text-sm mb-1">{actor.name}</h4>
                <p class="text-gray-400 text-xs">{actor.character}</p>
              </div>
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- Similar Movies -->
    {movie.similar?.results && movie.similar.results.length > 0 && (
      <section class="py-16 bg-dark-900">
        <div class="container mx-auto px-4">
          <h2 class="text-3xl font-bold text-white mb-8">Similar Movies</h2>
          
          <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6">
            {movie.similar.results.slice(0, 12).map((similarMovie) => (
              <MovieCard movie={similarMovie} />
            ))}
          </div>
        </div>
      </section>
    )}
  </main>

  <Footer />

  <!-- Trailer Modal -->
  <div id="trailer-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
    <div class="relative w-full max-w-4xl aspect-video">
      <button 
        onclick="closeTrailer()"
        class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      <iframe 
        id="trailer-iframe"
        class="w-full h-full rounded-lg"
        frameborder="0"
        allowfullscreen
      ></iframe>
    </div>
  </div>
</Layout>

<script>
  function openTrailer(videoKey) {
    const modal = document.getElementById('trailer-modal');
    const iframe = document.getElementById('trailer-iframe') as HTMLIFrameElement;
    
    if (modal && iframe) {
      iframe.src = `https://www.youtube.com/embed/${videoKey}?autoplay=1`;
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeTrailer() {
    const modal = document.getElementById('trailer-modal');
    const iframe = document.getElementById('trailer-iframe') as HTMLIFrameElement;
    
    if (modal && iframe) {
      iframe.src = '';
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }
  }

  // Close modal when clicking outside
  document.getElementById('trailer-modal')?.addEventListener('click', (e) => {
    if (e.target === e.currentTarget) {
      closeTrailer();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeTrailer();
    }
  });
</script>
